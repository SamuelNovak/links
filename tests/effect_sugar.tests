Sugar off
sig f : (() {E|e}~> ()) -> () {E{_}|e}~> () fun f(g) { fun() { handle(g()) { case E(res) -> res(()) }}} f
stdout : fun : (() {E:() -> ()|a}~> ()) -> () {E{_}|a}~> ()
args : --enable-handlers --set=effect_sugar=false

Policy: none [1], signature with explicit shared effect
sig f : (() {E|e}~> ()) -> () {E{_}|e}~> () fun f(g) { fun() { handle(g()) { case E(res) -> res(()) }}} f
stdout : fun : (() {E:() {}-> ()|_}~> ()) -_-> () {E{_}|_}~> ()
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=none

Policy: none [2], signature with implicit shared effect
sig f : (() {E|_}~> ()) -> () {E{_}|_}~> () fun f(g) { fun() { handle(g()) { case E(res) -> res(()) }}} f
stdout : fun : (() {E:() {}-> ()|_}~> ()) -_-> () {E{_}|_}~> ()
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=none

Policy: none [3], type alias
typename T(a, e::Eff) = (a) -e-> a; sig f : T(a) fun f(x) { x } f
stdout : fun : T (_,{ |_})
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=none

Policy: none [4], type alias
typename T(a) = (a) -> a; sig f : T(a) fun f(x) { x } f
stdout : fun : T (_,{ |_})
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=none

Policy: none [4], type alias implicit
typename T(a, e::Eff) = (a) -e-> a; sig f : T(a, { |e}) fun f(x) { x } f
stdout : fun : T (_)
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=alias_omit

Policy: presence_omit [1]: signature with implicit shared effect, handler
sig f : (() {E|_}~> ()) -> () {E{_}|_}~> () fun f(g) { fun() { handle(g()) { case E(res) -> res(()) }}} f
stdout : fun : (() {E:() {}-> ()|_}~> ()) -_-> () ~> ()
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=presence_omit

Policy: presence_omit [2]: signature with implicit shared effect, handler, propagation
sig f : (() {E|_}~> ()) -> () { |_}~> () fun f(g) { fun() { handle(g()) { case E(res) -> res(()) }}} f
stdout : fun : (() {E:() {}-> ()|_}~> ()) -_-> () ~> ()
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=presence_omit

Policy: presence_omit [3]: multiple shared effect rows
sig f : (() {E:() {}-> ()|e}~> (), () {F:() {}-> ()|f}~> ()) -> (() {E{_}|e}~> (), () {F{_}|f}~> ()) fun f(p,q) { var p = fun() { handle(p()) { case Return(v) -> v case E(res) -> res(()) }}; var q = fun() { handle(q()) { case Return(v) -> v case F(res) -> res(()) }}; (p,q) } f
stdout : fun : (() {E:() {}-> ()|a}~> (), () {F:() {}-> ()|b}~> ()) -> (() ~a~> (), () ~b~> ())
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=presence_omit

Policy: alias_omit [1], printer only
typename T(a, e::Eff) = (a) -e-> a; sig f : T(a, { |e}) fun f(x) { x } f
stdout : fun : T (_)
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=alias_omit

Policy: alias_omit [2], desugaring + printer
typename T(a, e::Eff) = (a) -e-> a; sig f : T(a) fun f(x) { x } f
stdout : fun : T (_)
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=alias_omit

Policy: alias_omit [3], desugaring + printer
typename T(a) = (a) -> a; sig f : T(a) fun f(x) { x } f
stdout : fun : T (_)
args : --enable-handlers --set=effect_sugar=true --set=effect_sugar_policy=alias_omit

