# Effect sugar examples:

# Functions (defined with no sugar):
# (Note that all the functions do the same thing, they just have different signature)

sig g1 : (() {Eff:()|e}~> ()) -> (() {Eff{_}|e}~> ())
fun g1(x)() { handle(x()) { case Return() -> () case Eff(res) -> () } }
# g1 = fun : (() {Eff:() -> ()|a}~> ()) -> () {Eff{_}|a}~> ()

sig g2 : (() {Eff:()}~> ()) -> (() {Eff{_}}~> ())
fun g2(x)() { handle(x()) { case Return() -> () case Eff(res) -> () } }
# g2 = fun : (() {Eff:() -> ()}~> ()) -> () {Eff{_}}~> ()

sig g3 : (Comp((), {Eff|e})) -> Comp((), {Eff{_}|e})
fun g3(x)() { handle(x()) { case Return() -> () case Eff(res) -> () } }
# g3 = fun : (Comp ((),{Eff:() {}-> ()|a})) -> Comp ((),{Eff{_}|a})

typename Cmp2(a,b,e::Eff,f::Eff) = (a) -e-> () -f-> b;

typename Test(a,a', b,b', e::Eff,e'::Eff, f::Eff,f'::Eff) =
  (Cmp2(a,a',{ |e},{ |e'}), Cmp2(b,b',{ |f},{ |f'}));

sig two : (Cmp2(a,a',{ |e},{ |e'}), Cmp2(b,b',{ |f},{ |f'}))
          -> Test(a,a',b,b',{ |e},{ |e'},{ |f},{ |f'})
fun two(x,y) {
  (x, y)
}
